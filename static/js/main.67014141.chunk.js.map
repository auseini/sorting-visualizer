{"version":3,"sources":["components/Header.js","components/Visualizer.js","sorting-algorithms/MergeSort.js","sorting-algorithms/BubbleSort.js","sorting-algorithms/QuickSort.js","sorting-algorithms/HeapSort.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","state","canSort","updateSort","bind","merge","bubble","quick","heap","newClick","this","setState","onMergeSort","onQuickSort","onBubbleSort","onHeapSort","onNewClick","className","onClick","disabled","Component","Visualizer","prevProps","bars","document","querySelector","childNodes","i","length","style","background","array","map","value","index","height","mergeSort","left","right","animations","middle","parseInt","leftSize","rightSize","leftArr","Array","rightArr","l","r","k","push","swap","j","temp","bubbleSort","n","quickSort","low","high","pivot","idx","partition","heapify","heapSize","root","largest","heapSort","Math","floor","App","createArray","resetArray","complete","setTimeout","color","ind1","ind2","ind","size","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.67014141.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.css'\r\n\r\nclass Header extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {canSort: true};\r\n\r\n        this.updateSort = this.updateSort.bind(this);\r\n        this.merge = this.merge.bind(this);\r\n        this.bubble = this.bubble.bind(this);\r\n        this.quick = this.quick.bind(this);\r\n        this.heap = this.heap.bind(this);\r\n        this.newClick = this.newClick.bind(this);\r\n    }\r\n\r\n   \r\n    updateSort(){\r\n        this.setState({canSort: !this.state.canSort});\r\n    }\r\n\r\n    merge(){\r\n        this.updateSort();\r\n        this.props.onMergeSort();\r\n    }\r\n    quick(){\r\n        this.updateSort();\r\n        this.props.onQuickSort();\r\n    }\r\n    bubble(){\r\n        this.updateSort();\r\n        this.props.onBubbleSort();\r\n    }\r\n    heap(){\r\n        this.updateSort();\r\n        this.props.onHeapSort();\r\n    }\r\n    newClick(){\r\n        this.setState({canSort: true});\r\n        this.props.onNewClick();\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"header\">\r\n                <button onClick={this.merge} disabled={!this.state.canSort}>Merge Sort</button>\r\n                <button onClick={this.bubble} disabled={!this.state.canSort}>Bubble Sort</button>\r\n                <button onClick={this.heap} disabled={!this.state.canSort}>Heap Sort</button>\r\n                <button onClick={this.quick} disabled={!this.state.canSort}>Quick Sort</button>\r\n                <button onClick={this.newClick} className=\"newArray\">New Array</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport './Visualizer.css';\r\n\r\nclass Visualizer extends Component{\r\n   \r\n    componentDidUpdate(prevProps){\r\n        const bars = document.querySelector(\".container\").childNodes;\r\n\r\n        for(let i = 0; i < bars.length; i++){\r\n            bars[i].style.background = 'aqua';\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n        <div className=\"container\">\r\n            \r\n            {this.props.array.map((value, index) =><div key={index} className=\"bar\"\r\n            style={\r\n            {\r\n                height: `${value*10}px`,\r\n                \r\n            }}></div>)}\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Visualizer;","\r\nfunction mergeSort(array, left, right, animations){\r\n    if(left >= right){\r\n        return;\r\n    }\r\n  \r\n    //find middle and recursivly call on left and right halves of array\r\n    let middle = parseInt((right-left)/2) + left;\r\n   \r\n    mergeSort(array, left, middle, animations);\r\n    mergeSort(array, middle + 1, right, animations);\r\n    merge(array, left, middle, right, animations)\r\n}\r\n\r\nfunction merge(array, left, middle, right, animations){\r\n\r\n    //get 2 arrays, for left and right side\r\n    let leftSize = middle - left + 1;\r\n    let rightSize = right - middle;\r\n    let leftArr = Array(leftSize);\r\n    let rightArr = Array(rightSize);\r\n\r\n    for(let i = 0; i < leftSize; i++){\r\n        leftArr[i] = array[left + i];\r\n    }\r\n    for(let i = 0; i < rightSize; i++){\r\n        rightArr[i] = array[middle + i + 1];\r\n    }\r\n  \r\n    //compare elements between array and add to array\r\n    // index variables\r\n    let l = 0;\r\n    let r = 0;\r\n    let k = left;\r\n\r\n    while(l < leftSize && r < rightSize){\r\n        animations.push([l + left, middle + r])\r\n        animations.push([l + left, r + middle])\r\n\r\n        if(leftArr[l] <= rightArr[r]){\r\n            animations.push([k, leftArr[l]]);\r\n\r\n            array[k] = leftArr[l];\r\n            l++;\r\n        } else{\r\n            animations.push([k, rightArr[r]]);\r\n\r\n            array[k] = rightArr[r];\r\n            r++;\r\n        }\r\n        k++;\r\n        \r\n    }\r\n\r\n    //if anything is remaining copy them to array\r\n    while(l < leftSize){\r\n        animations.push([l, l]);\r\n        animations.push([l, l]);\r\n        animations.push([k, leftArr[l]]);\r\n\r\n        array[k] = leftArr[l];\r\n        l++;\r\n        k++;\r\n    }\r\n    while(r < rightSize){\r\n        animations.push([r + middle, r + middle]);\r\n        animations.push([r + middle, r + middle]);\r\n        animations.push([k, rightArr[r]]);\r\n        \r\n\r\n        array[k] = rightArr[r];\r\n        k++;\r\n        r++;\r\n    }\r\n\r\n    // bars.childNodes[7].style.background = 'red';\r\n    // setTimeout(()=>{bars.childNodes[7].style.background = 'blue';}, 1000);\r\n    \r\n\r\n\r\n}\r\n\r\nexport default mergeSort;","function bubbleSort(array, animations){\r\n    let n = array.length;\r\n\r\n    //go through each pair of elements and swap if necessary\r\n    for(let i = 0; i< n - 1; i++){\r\n        for(let j = 0; j < n - i - 1; j++){\r\n            animations.push([j, j+1]);\r\n\r\n            if(array[j] > array[j+1]){\r\n                swap(array, j, j+1, animations);\r\n            } else{\r\n                animations.push([-1, -1]);\r\n                animations.push([-1, -1]);\r\n            }\r\n\r\n            animations.push([j, j+1]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction swap(array, i, j, animations){\r\n    let temp = array[i];\r\n\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n\r\n    animations.push([i, array[i]]);\r\n    animations.push([j, array[j]]);\r\n}\r\n\r\nexport default bubbleSort;","\r\nfunction quickSort(array, low, high, animations){\r\n\r\n    if(low < high){\r\n        let pivot = partition(array, low, high, animations);\r\n\r\n        //quick sort around pivoit which is in right spot\r\n        quickSort(array, low, pivot - 1, animations);\r\n        quickSort(array, pivot + 1, high, animations);\r\n    }\r\n}\r\n\r\nfunction partition(array, low, high, animations){\r\n    let pivot = array[high];\r\n\r\n    //add animation, -1 as third digit to signify pivot color change\r\n    animations.push([high, high, -1]);\r\n\r\n    //keeps track of index\r\n    let idx = low - 1;\r\n\r\n    for(let i = low; i < high; i++){\r\n        //2 meangs go to new color\r\n        animations.push([i, i, 2]);\r\n        \r\n        if(array[i] < pivot){\r\n            //brings elements lower than pivot down array\r\n            idx++;\r\n            animations.push([idx, idx, 2])\r\n            \r\n            swap(array, idx, i, animations); \r\n            \r\n            animations.push([idx, idx, 3])\r\n        }\r\n\r\n        //3 is revert to old color\r\n        animations.push([i, i, 3]);\r\n       \r\n    }\r\n    //change pivot color back\r\n    animations.push([high, high, -2]);\r\n    //move pivot to its correct spot\r\n    swap(array, idx + 1, high, animations);\r\n    return (idx + 1);\r\n}\r\n\r\nfunction swap(array, i, j, animations){\r\n    let temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n\r\n    //1 means swap\r\n    animations.push([i, array[i], 1]);\r\n    animations.push([j, array[j], 1])\r\n}\r\n\r\nexport default quickSort;","\r\nfunction heapSort(array, animations){\r\n    let n = array.length;\r\n\r\n    //get max heap\r\n    for(let i = Math.floor(n/2) - 1; i >= 0; i--){\r\n        heapify(array, n, i, animations);\r\n    }\r\n\r\n    //move root o end then heapify the rest\r\n    for(let i = array.length - 1; i  > 0; i--){\r\n        swap(array, 0, i, animations)\r\n\r\n        //call ceapify again on smaller heap\r\n        heapify(array, i, 0, animations)\r\n    }\r\n\r\n}\r\n\r\nfunction heapify(array, heapSize, root, animations){\r\n\r\n    //1 is change to largest color\r\n    animations.push([root, root, 1]);\r\n\r\n    let largest = root;\r\n    let left = root * 2 + 1;\r\n    let right = root * 2 + 2;\r\n\r\n    if(left < heapSize){\r\n        // 2 is change to comparing color\r\n        animations.push([left, left, 2]);\r\n\r\n        //find alrgest between children\r\n        if (array[left] > array[largest]){\r\n            //3 m,eans revert to oirig color\r\n            animations.push([root, root, 3]);\r\n            \r\n            largest = left;\r\n            animations.push([left, left, 1]);\r\n        } else{\r\n            animations.push([left, left, 3]);\r\n        }\r\n    }\r\n    \r\n\r\n    if(right < heapSize){\r\n        animations.push([right, right, 2]);\r\n\r\n        if(array[right] > array[largest]){\r\n            animations.push([largest, largest, 3]);\r\n\r\n            largest = right;\r\n            animations.push([right, right, 1])\r\n        } else{\r\n            animations.push([right, right, 3]);\r\n        }\r\n    }\r\n    \r\n\r\n    if(largest !== root){\r\n        swap(array, root, largest, animations);\r\n\r\n        //heapify at new index\r\n        heapify(array, heapSize, largest, animations);\r\n    } else{\r\n        animations.push([root, root, 3]);\r\n    }\r\n}\r\n\r\nfunction swap(array, i, j, animations){\r\n    let temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n    \r\n    //0 means swap animation\r\n    animations.push([i, array[i], 0]);\r\n    animations.push([j, array[j], 0]);\r\n    animations.push([i, i, 3]);\r\n    animations.push([j, j, 3]);\r\n}\r\n\r\nexport default heapSort;","import Header from './components/Header';\nimport Visualizer from './components/Visualizer'\nimport './App.css';\nimport React, { Component } from 'react';\nimport mergeSort from './sorting-algorithms/MergeSort';\n// eslint-disable-next-line\nimport {bubbleTest, mergeTest, quickTest, heapTest} from './Test'\nimport bubbleSort from './sorting-algorithms/BubbleSort';\nimport quickSort from './sorting-algorithms/QuickSort';\nimport heapSort from './sorting-algorithms/HeapSort';\nclass App extends Component {\n\n  constructor(){\n    super();\n    //get new array\n    this.state = {\n      array: []\n    }\n    //bind this for functions\n    this.createArray = this.createArray.bind(this);\n    this.resetArray = this.resetArray.bind(this);\n    this.merge = this.merge.bind(this);\n    this.bubble = this.bubble.bind(this);\n    this.quick = this.quick.bind(this);\n    this.heap = this.heap.bind(this);\n    this.complete = this.complete.bind(this);\n  }\n\n  componentDidMount(){\n    this.resetArray();\n  }\n  complete(bars){\n\n    for(let i = 0; i < bars.length; i++){\n      setTimeout(() => {\n        bars[i].style.background = '#E1de6a';\n      }, i * 6);\n    }\n  }\n  heap(){\n    let array = [...this.state.array];\n    let animations = [];\n\n    heapSort(array, animations);\n    \n    //change state for buttons so cant sort when already sorted\n\n    const bars = document.querySelector(\".container\").childNodes;\n    for(let i = 0; i < animations.length; i++){\n      \n      const [j, k, l] = animations[i];\n\n      const color = (\n        l === 1 ? 'blue' :\n        l === 2 ? 'violet' :\n        l === 3 ? 'aqua' :\n        null\n      );\n\n      if( l !== 0 ){\n        setTimeout(() => {\n          bars[j].style.background = color;\n        }, i * 6)\n        \n      } else {\n        setTimeout(() => {\n          bars[j].style.height = `${k * 10}px`;\n          // let temp = bars[j].style.height;\n          // bars[j].style.height = bars[k].style.height;\n          // bars[k].style.height = temp;\n        }, i * 6)\n      }\n      if(i === animations.length - 1){\n        setTimeout(() => {\n          this.complete(bars);\n        }, i * 6)\n      }\n    }\n    \n  }\n  quick(){\n    let array = [...this.state.array];\n    let animations = [];\n\n    quickSort(array, 0, array.length - 1, animations);\n   \n    //change state for buttons so cant sort when already sorted\n\n    for(let i = 0; i < animations.length; i++){\n      const bars = document.querySelector(\".container\").childNodes;\n      const [j, k, l] = animations[i];\n\n      //get color change necessary\n      const color = (\n        l === -1 ? 'blue' :\n        l === -2 ? 'aqua' :\n        l === 2 ? 'violet' :\n        l === 3 ? 'aqua' :\n        null\n      );\n\n      if(l !== 1){\n        setTimeout(() => {\n          bars[k].style.background = color;\n        }, i * 6)\n        \n      } else {\n        setTimeout(() => {\n          bars[j].style.height = `${k * 10}px`;\n        }, i * 6)\n      } \n      if(i === animations.length - 1){\n        setTimeout(() => {\n          this.complete(bars);\n        }, i * 6)\n      }\n    }\n  }\n  bubble(){\n    let array = [...this.state.array];\n    let animations = []\n    bubbleSort(array, animations);\n\n    //change state for buttons so cant sort when already sorted\n\n    for(let i = 0; i < animations.length; i++){\n      const bars = document.querySelector(\".container\").childNodes;\n      const color = i % 4 === 0 ? 'violet' : 'aqua';\n      \n      const [ind1, ind2] = animations[i];\n\n      if(ind1 !== -1){\n        if(i % 4 === 1 || i % 4 === 2){\n          setTimeout(()=> {\n            bars[ind1].style.height = `${ind2 * 10}px`;\n          }, i * 2.5)\n        } else {\n            setTimeout(()=>{\n              bars[ind1].style.background = color;\n              bars[ind2].style.background = color;\n            }, i * 2.5)\n        } \n      }\n      if(i === animations.length - 1){\n        setTimeout(() => {\n          this.complete(bars);\n        }, i * 2.5)\n      }\n    }\n    \n  }\n  merge(){\n    let array = [...this.state.array];\n    let animations = [];\n    mergeSort(array, 0, array.length - 1, animations)\n  \n    //change state for buttons so cant sort when already sorted\n    \n\n    for(let i = 0; i < animations.length; i++){\n\n      const bars = document.querySelector(\".container\").childNodes;\n      const color = i % 3 === 0 ? 'violet' : 'aqua';\n      if(i % 3 === 2){\n        setTimeout(() => {\n          const [ind, height] = animations[i];\n          bars[ind].style.height = `${height * 10}px`\n        }, i * 6);\n      } else{\n        setTimeout(()=>{\n          const [ind1, ind2] = animations[i];\n\n          bars[ind1].style.background = color;\n          bars[ind2].style.background = color;\n        }, i * 6)\n\n      }\n      if(i === animations.length - 1){\n        setTimeout(() => {\n          this.complete(bars);\n        }, i * 6)\n      }\n    }\n\n  }\n  createArray(size){\n    let array = [];\n\n    //push random values onto array\n    for(let i = 0; i < size; i++){\n      array.push(Math.floor(Math.random() * 44 + 1));\n    }\n\n    return array;\n  }\n  resetArray(){\n    const size = Math.floor(Math.random() * 44 + 20);\n    const array = this.createArray(size)\n    this.setState({ array: array})\n  }\n  render(){\n    return (\n      <div className=\"App\">  \n        <Header onHeapSort={this.heap} onQuickSort={this.quick} onBubbleSort={this.bubble} onMergeSort={this.merge} onNewClick={this.resetArray}/>\n        <Visualizer array={this.state.array} />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}